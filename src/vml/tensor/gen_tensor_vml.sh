#!/bin/bash
echo "//this code is generated by gen_tensor_vml.sh
#include \"../../../include/monolish_vml.hpp\"
#include \"../../internal/monolish_internal.hpp\"
#include \"./arithmetic/tensadd.hpp\"
#include \"./arithmetic/tenssub.hpp\"
#include \"./arithmetic/tensmul.hpp\"
#include \"./arithmetic/tensdiv.hpp\"
#include \"./math_2op/tensasin.hpp\"
#include \"./math_2op/tensasinh.hpp\"
#include \"./math_2op/tensatan.hpp\"
#include \"./math_2op/tensatanh.hpp\"
#include \"./math_2op/tensfloor.hpp\"
#include \"./math_2op/tensreciprocal.hpp\"
#include \"./math_2op/tenssign.hpp\"
#include \"./math_2op/tenssin.hpp\"
#include \"./math_2op/tenssinh.hpp\"
#include \"./math_2op/tenssqrt.hpp\"
#include \"./math_2op/tensceil.hpp\"
#include \"./math_2op/tenstan.hpp\"
#include \"./math_2op/tenstanh.hpp\"
#include \"./math_2op/tensexp.hpp\"
#include \"./math_2op/tensalo.hpp\"
#include \"./math_1_3op/tensmax.hpp\"
#include \"./math_1_3op/tensmin.hpp\"
#include \"./math_1_3op/tenspow.hpp\"

namespace monolish {
namespace vml {
"

## $MAT tensor-tensor arithmetic
funcs=(add sub mul div)
for func in ${funcs[@]}; do
  for prec in double float; do
    for arg1 in tensor::tensor_CRS\<$prec\>; do
      echo "void ${func}(const $arg1 &A, const $arg1 &B, $arg1 &C){tt${func}_core(A, B, C);}"
    done
    for arg1 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
      for arg2 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
        for arg3 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
          echo "void ${func}(const $arg1 &A, const $arg2 &B, $arg3 &C){tt${func}_core(A, B, C);}"
        done
      done
    done
  done
done

echo ""
################################################################

## $MAT tensor-scalar arithmetic
funcs=(add sub mul div)
for func in ${funcs[@]}; do
  for prec in double float; do
    for arg1 in tensor::tensor_CRS\<$prec\>; do
      echo "void ${func}(const $arg1 &A, const $prec alpha, $arg1 &C){st${func}_core(A, alpha, C);}"
    done
    for arg1 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
      for arg2 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
        echo "void ${func}(const $arg1 &A, const $prec alpha, $arg2 &C){st${func}_core(A, alpha, C);}"
      done
    done
  done
done

echo ""
#############################################

## tensor-tensor pow
for prec in double float; do
  for arg1 in tensor::tensor_CRS\<$prec\>; do
    echo "void pow(const $arg1 &A, const $arg1 &B, $arg1 &C){ttpow_core(A, B, C);}"
  done
  for arg1 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
    for arg2 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
      for arg3 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
        echo "void pow(const $arg1 &A, const $arg2 &B, $arg3 &C){ttpow_core(A, B, C);}"
      done
    done
  done
done

## tensor-scalar pow
for prec in double float; do
  for arg1 in tensor::tensor_CRS\<$prec\>; do
    echo "void pow(const $arg1 &A, const $prec alpha, $arg1 &C){stpow_core(A, alpha, C);}"
  done
  for arg1 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
    for arg2 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
      echo "void pow(const $arg1 &A, const $prec alpha, $arg2 &C){stpow_core(A, alpha, C);}"
    done
  done
done

echo ""
#############################################

## tensor alo
for prec in double float; do
  for arg1 in tensor::tensor_CRS\<$prec\>; do
    echo "void alo(const $arg1 &A, const $prec alpha, const $prec beta, $arg1 &C){talo_core(A, alpha, beta, C);}"
  done
  for arg1 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
    for arg2 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
      echo "void alo(const $arg1 &A, const $prec alpha, const $prec beta, $arg2 &C){talo_core(A, alpha, beta, C);}"
    done
  done
done

echo ""
#############################################
## 2arg math
math=(sin sqrt sinh asin asinh tan tanh atan atanh ceil floor sign reciprocal exp)
for math in ${math[@]}; do
  for prec in double float; do
    for arg1 in tensor::tensor_CRS\<$prec\>; do
      echo "void $math(const $arg1 &A, $arg1 &C){t${math}_core(A, C);}"
    done
    for arg1 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
      for arg2 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
        echo "void $math(const $arg1 &A, $arg2 &C){t${math}_core(A, C);}"
      done
    done
  done
done

echo ""
#############################################

## tensor-tensor max min
detail=(greatest smallest)
funcs=(max min)
for func in ${funcs[@]}; do
  for prec in double float; do
    for arg1 in tensor::tensor_CRS\<$prec\>; do
      echo "void ${func}(const $arg1 &A, const $arg1 &B, $arg1 &C){tt${func}_core(A, B, C);}"
    done
    for arg1 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
      for arg2 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
        for arg3 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
          echo "void ${func}(const $arg1 &A, const $arg2 &B, $arg3 &C){tt${func}_core(A, B, C);}"
        done
      done
    done
  done
done

echo ""

## tensor-scalar max min
detail=(greatest smallest)
funcs=(max min)
for func in ${funcs[@]}; do
  for prec in double float; do
    for arg1 in tensor::tensor_CRS\<$prec\>; do
      echo "void ${func}(const $arg1 &A, const $prec alpha, $arg1 &C){st${func}_core(A, alpha, C);}"
    done
    for arg1 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
      for arg2 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
        echo "void ${func}(const $arg1 &A, const $prec alpha, $arg2 &C){st${func}_core(A, alpha, C);}"
      done
    done
  done
done

echo ""

## $MAT tensor max min
detail=(greatest smallest)
funcs=(max min)
for func in ${funcs[@]}; do
  for prec in double float; do
    for arg1 in tensor::tensor_CRS\<$prec\>; do
      echo "$prec ${func}(const $arg1 &C){return t${func}_core<$arg1,$prec>(C);}"
    done
    for arg1 in tensor::tensor_Dense\<$prec\> view_tensor_Dense\<vector\<$prec\>,$prec\> view_tensor_Dense\<matrix::Dense\<$prec\>,$prec\> view_tensor_Dense\<tensor::tensor_Dense\<$prec\>,$prec\>; do
      echo "$prec ${func}(const $arg1 &C){return t${func}_core<$arg1,$prec>(C);}"
    done
  done
done

echo ""
#############################################

echo "
} // namespace vml
} // namespace monolish "

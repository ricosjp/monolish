// This code is generated by gen_times.sh
#include "tensor_crs_times.hpp"
#include "tensor_dense_line_times.hpp"
#include "tensor_dense_times.hpp"

namespace monolish::blas {

void times(const double alpha, const tensor::tensor_Dense<double> &A,
           tensor::tensor_Dense<double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha, const tensor::tensor_Dense<double> &A,
           view_tensor_Dense<vector<double>, double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha, const tensor::tensor_Dense<double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha, const tensor::tensor_Dense<double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha,
           const view_tensor_Dense<vector<double>, double> &A,
           tensor::tensor_Dense<double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha,
           const view_tensor_Dense<vector<double>, double> &A,
           view_tensor_Dense<vector<double>, double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha,
           const view_tensor_Dense<vector<double>, double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha,
           const view_tensor_Dense<vector<double>, double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha,
           const view_tensor_Dense<matrix::Dense<double>, double> &A,
           tensor::tensor_Dense<double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha,
           const view_tensor_Dense<matrix::Dense<double>, double> &A,
           view_tensor_Dense<vector<double>, double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha,
           const view_tensor_Dense<matrix::Dense<double>, double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha,
           const view_tensor_Dense<matrix::Dense<double>, double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha,
           const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           tensor::tensor_Dense<double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha,
           const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           view_tensor_Dense<vector<double>, double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha,
           const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha,
           const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const double alpha, const tensor::tensor_CRS<double> &A,
           tensor::tensor_CRS<double> &C) {
  times_core<double>(alpha, A, C);
}
void times(const float alpha, const tensor::tensor_Dense<float> &A,
           tensor::tensor_Dense<float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha, const tensor::tensor_Dense<float> &A,
           view_tensor_Dense<vector<float>, float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha, const tensor::tensor_Dense<float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha, const tensor::tensor_Dense<float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha, const view_tensor_Dense<vector<float>, float> &A,
           tensor::tensor_Dense<float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha, const view_tensor_Dense<vector<float>, float> &A,
           view_tensor_Dense<vector<float>, float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha, const view_tensor_Dense<vector<float>, float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha, const view_tensor_Dense<vector<float>, float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha,
           const view_tensor_Dense<matrix::Dense<float>, float> &A,
           tensor::tensor_Dense<float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha,
           const view_tensor_Dense<matrix::Dense<float>, float> &A,
           view_tensor_Dense<vector<float>, float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha,
           const view_tensor_Dense<matrix::Dense<float>, float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha,
           const view_tensor_Dense<matrix::Dense<float>, float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha,
           const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           tensor::tensor_Dense<float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha,
           const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           view_tensor_Dense<vector<float>, float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha,
           const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha,
           const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_core<float>(alpha, A, C);
}
void times(const float alpha, const tensor::tensor_CRS<float> &A,
           tensor::tensor_CRS<float> &C) {
  times_core<float>(alpha, A, C);
}

void times_row(const tensor::tensor_Dense<double> &A, const vector<double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A,
               const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const vector<double> &x, tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const vector<double> &x, tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const vector<double> &x, tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_CRS<double> &A, const vector<double> &x,
               tensor::tensor_CRS<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_CRS<double> &A,
               const view1D<vector<double>, double> &x,
               tensor::tensor_CRS<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_CRS<double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_CRS<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_CRS<double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_CRS<double> &C) {
  times_row_core<double>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const vector<float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A,
               const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const vector<float> &x, tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const vector<float> &x, tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const vector<float> &x, tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_CRS<float> &A, const vector<float> &x,
               tensor::tensor_CRS<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_CRS<float> &A,
               const view1D<vector<float>, float> &x,
               tensor::tensor_CRS<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_CRS<float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_CRS<float> &C) {
  times_row_core<float>(A, x, C);
}
void times_row(const tensor::tensor_CRS<float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_CRS<float> &C) {
  times_row_core<float>(A, x, C);
}

void times_col(const tensor::tensor_Dense<double> &A, const vector<double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A,
               const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const vector<double> &x, tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const vector<double> &x, tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const vector<double> &x, tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const vector<float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A,
               const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const vector<float> &x, tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const vector<float> &x, tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const vector<float> &x, tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, x, C);
}

void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const vector<double> &x, tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const vector<double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_row_core<double>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const vector<float> &x, tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const vector<float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}
void times_row(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_row_core<float>(A, num, x, C);
}

void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const vector<double> &x, tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<double> &A, const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const vector<double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const vector<double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<vector<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num, const view1D<matrix::Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               tensor::tensor_Dense<double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<vector<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<matrix::Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<double>, double> &x,
               view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  times_col_core<double>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const vector<float> &x, tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const tensor::tensor_Dense<float> &A, const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const vector<float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<vector<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<matrix::Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const vector<float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<vector<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num, const view1D<matrix::Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               tensor::tensor_Dense<float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<vector<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<matrix::Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
void times_col(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
               const size_t num,
               const view1D<tensor::tensor_Dense<float>, float> &x,
               view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  times_col_core<float>(A, num, x, C);
}
} // namespace monolish::blas
